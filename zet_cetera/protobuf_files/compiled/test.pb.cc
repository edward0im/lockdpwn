// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace test {
class RootDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Root>
     _instance;
} _Root_default_instance_;
class SomeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Some>
     _instance;
} _Some_default_instance_;

namespace protobuf_test_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root, some_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Some, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Some, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Some, someid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Some, somename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Some, some_),
  2,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(Root)},
  { 11, 19, sizeof(Some)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Root_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Some_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "test.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Root_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Root_default_instance_);_Some_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Some_default_instance_);_Root_default_instance_._instance.get_mutable()->some_ = const_cast< ::test::Some*>(
      ::test::Some::internal_default_instance());
  _Some_default_instance_._instance.get_mutable()->some_ = const_cast< ::test::Some*>(
      ::test::Some::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ntest.proto\022\004test\":\n\004Root\022\n\n\002id\030\001 \001(\022\022\014"
      "\n\004name\030\002 \001(\t\022\030\n\004some\030\003 \001(\0132\n.test.Some\"B"
      "\n\004Some\022\016\n\006someId\030\001 \001(\022\022\020\n\010someName\030\002 \001(\t"
      "\022\030\n\004some\030\003 \001(\0132\n.test.Some"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 146);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_test_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Root::kIdFieldNumber;
const int Root::kNameFieldNumber;
const int Root::kSomeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Root::Root()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.Root)
}
Root::Root(const Root& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_some()) {
    some_ = new ::test::Some(*from.some_);
  } else {
    some_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:test.Root)
}

void Root::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&some_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&some_)) + sizeof(id_));
}

Root::~Root() {
  // @@protoc_insertion_point(destructor:test.Root)
  SharedDtor();
}

void Root::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete some_;
}

void Root::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Root::descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Root& Root::default_instance() {
  protobuf_test_2eproto::InitDefaults();
  return *internal_default_instance();
}

Root* Root::New(::google::protobuf::Arena* arena) const {
  Root* n = new Root;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Root::Clear() {
// @@protoc_insertion_point(message_clear_start:test.Root)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(some_ != NULL);
      some_->::test::Some::Clear();
    }
  }
  id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Root::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.Root)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "test.Root.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .test.Some some = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_some()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.Root)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.Root)
  return false;
#undef DO_
}

void Root::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.Root)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "test.Root.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .test.Some some = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->some_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.Root)
}

::google::protobuf::uint8* Root::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:test.Root)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "test.Root.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .test.Some some = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->some_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.Root)
  return target;
}

size_t Root::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.Root)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .test.Some some = 3;
    if (has_some()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->some_);
    }

    // optional sint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Root::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.Root)
  GOOGLE_DCHECK_NE(&from, this);
  const Root* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Root>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.Root)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.Root)
    MergeFrom(*source);
  }
}

void Root::MergeFrom(const Root& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.Root)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_some()->::test::Some::MergeFrom(from.some());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Root::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.Root)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Root::CopyFrom(const Root& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.Root)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Root::IsInitialized() const {
  return true;
}

void Root::Swap(Root* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Root::InternalSwap(Root* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(some_, other->some_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Root::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Root

// optional sint64 id = 1;
bool Root::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Root::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Root::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Root::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
::google::protobuf::int64 Root::id() const {
  // @@protoc_insertion_point(field_get:test.Root.id)
  return id_;
}
void Root::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:test.Root.id)
}

// optional string name = 2;
bool Root::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Root::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Root::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Root::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Root::name() const {
  // @@protoc_insertion_point(field_get:test.Root.name)
  return name_.GetNoArena();
}
void Root::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.Root.name)
}
#if LANG_CXX11
void Root::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.Root.name)
}
#endif
void Root::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.Root.name)
}
void Root::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.Root.name)
}
::std::string* Root::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:test.Root.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Root::release_name() {
  // @@protoc_insertion_point(field_release:test.Root.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Root::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:test.Root.name)
}

// optional .test.Some some = 3;
bool Root::has_some() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Root::set_has_some() {
  _has_bits_[0] |= 0x00000002u;
}
void Root::clear_has_some() {
  _has_bits_[0] &= ~0x00000002u;
}
void Root::clear_some() {
  if (some_ != NULL) some_->::test::Some::Clear();
  clear_has_some();
}
const ::test::Some& Root::some() const {
  const ::test::Some* p = some_;
  // @@protoc_insertion_point(field_get:test.Root.some)
  return p != NULL ? *p : *reinterpret_cast<const ::test::Some*>(
      &::test::_Some_default_instance_);
}
::test::Some* Root::mutable_some() {
  set_has_some();
  if (some_ == NULL) {
    some_ = new ::test::Some;
  }
  // @@protoc_insertion_point(field_mutable:test.Root.some)
  return some_;
}
::test::Some* Root::release_some() {
  // @@protoc_insertion_point(field_release:test.Root.some)
  clear_has_some();
  ::test::Some* temp = some_;
  some_ = NULL;
  return temp;
}
void Root::set_allocated_some(::test::Some* some) {
  delete some_;
  some_ = some;
  if (some) {
    set_has_some();
  } else {
    clear_has_some();
  }
  // @@protoc_insertion_point(field_set_allocated:test.Root.some)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Some::kSomeIdFieldNumber;
const int Some::kSomeNameFieldNumber;
const int Some::kSomeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Some::Some()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.Some)
}
Some::Some(const Some& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  somename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_somename()) {
    somename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.somename_);
  }
  if (from.has_some()) {
    some_ = new ::test::Some(*from.some_);
  } else {
    some_ = NULL;
  }
  someid_ = from.someid_;
  // @@protoc_insertion_point(copy_constructor:test.Some)
}

void Some::SharedCtor() {
  _cached_size_ = 0;
  somename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&some_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&someid_) -
      reinterpret_cast<char*>(&some_)) + sizeof(someid_));
}

Some::~Some() {
  // @@protoc_insertion_point(destructor:test.Some)
  SharedDtor();
}

void Some::SharedDtor() {
  somename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete some_;
}

void Some::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Some::descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Some& Some::default_instance() {
  protobuf_test_2eproto::InitDefaults();
  return *internal_default_instance();
}

Some* Some::New(::google::protobuf::Arena* arena) const {
  Some* n = new Some;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Some::Clear() {
// @@protoc_insertion_point(message_clear_start:test.Some)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!somename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*somename_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(some_ != NULL);
      some_->::test::Some::Clear();
    }
  }
  someid_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Some::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.Some)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 someId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_someid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &someid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string someName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_somename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->somename().data(), static_cast<int>(this->somename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "test.Some.someName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .test.Some some = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_some()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.Some)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.Some)
  return false;
#undef DO_
}

void Some::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.Some)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 someId = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->someid(), output);
  }

  // optional string someName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->somename().data(), static_cast<int>(this->somename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "test.Some.someName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->somename(), output);
  }

  // optional .test.Some some = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->some_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.Some)
}

::google::protobuf::uint8* Some::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:test.Some)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 someId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->someid(), target);
  }

  // optional string someName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->somename().data(), static_cast<int>(this->somename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "test.Some.someName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->somename(), target);
  }

  // optional .test.Some some = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->some_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.Some)
  return target;
}

size_t Some::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.Some)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string someName = 2;
    if (has_somename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->somename());
    }

    // optional .test.Some some = 3;
    if (has_some()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->some_);
    }

    // optional sint64 someId = 1;
    if (has_someid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->someid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Some::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.Some)
  GOOGLE_DCHECK_NE(&from, this);
  const Some* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Some>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.Some)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.Some)
    MergeFrom(*source);
  }
}

void Some::MergeFrom(const Some& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.Some)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_somename();
      somename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.somename_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_some()->::test::Some::MergeFrom(from.some());
    }
    if (cached_has_bits & 0x00000004u) {
      someid_ = from.someid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Some::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.Some)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Some::CopyFrom(const Some& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.Some)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Some::IsInitialized() const {
  return true;
}

void Some::Swap(Some* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Some::InternalSwap(Some* other) {
  using std::swap;
  somename_.Swap(&other->somename_);
  swap(some_, other->some_);
  swap(someid_, other->someid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Some::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Some

// optional sint64 someId = 1;
bool Some::has_someid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Some::set_has_someid() {
  _has_bits_[0] |= 0x00000004u;
}
void Some::clear_has_someid() {
  _has_bits_[0] &= ~0x00000004u;
}
void Some::clear_someid() {
  someid_ = GOOGLE_LONGLONG(0);
  clear_has_someid();
}
::google::protobuf::int64 Some::someid() const {
  // @@protoc_insertion_point(field_get:test.Some.someId)
  return someid_;
}
void Some::set_someid(::google::protobuf::int64 value) {
  set_has_someid();
  someid_ = value;
  // @@protoc_insertion_point(field_set:test.Some.someId)
}

// optional string someName = 2;
bool Some::has_somename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Some::set_has_somename() {
  _has_bits_[0] |= 0x00000001u;
}
void Some::clear_has_somename() {
  _has_bits_[0] &= ~0x00000001u;
}
void Some::clear_somename() {
  somename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_somename();
}
const ::std::string& Some::somename() const {
  // @@protoc_insertion_point(field_get:test.Some.someName)
  return somename_.GetNoArena();
}
void Some::set_somename(const ::std::string& value) {
  set_has_somename();
  somename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.Some.someName)
}
#if LANG_CXX11
void Some::set_somename(::std::string&& value) {
  set_has_somename();
  somename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.Some.someName)
}
#endif
void Some::set_somename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_somename();
  somename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.Some.someName)
}
void Some::set_somename(const char* value, size_t size) {
  set_has_somename();
  somename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.Some.someName)
}
::std::string* Some::mutable_somename() {
  set_has_somename();
  // @@protoc_insertion_point(field_mutable:test.Some.someName)
  return somename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Some::release_somename() {
  // @@protoc_insertion_point(field_release:test.Some.someName)
  clear_has_somename();
  return somename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Some::set_allocated_somename(::std::string* somename) {
  if (somename != NULL) {
    set_has_somename();
  } else {
    clear_has_somename();
  }
  somename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), somename);
  // @@protoc_insertion_point(field_set_allocated:test.Some.someName)
}

// optional .test.Some some = 3;
bool Some::has_some() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Some::set_has_some() {
  _has_bits_[0] |= 0x00000002u;
}
void Some::clear_has_some() {
  _has_bits_[0] &= ~0x00000002u;
}
void Some::clear_some() {
  if (some_ != NULL) some_->::test::Some::Clear();
  clear_has_some();
}
const ::test::Some& Some::some() const {
  const ::test::Some* p = some_;
  // @@protoc_insertion_point(field_get:test.Some.some)
  return p != NULL ? *p : *reinterpret_cast<const ::test::Some*>(
      &::test::_Some_default_instance_);
}
::test::Some* Some::mutable_some() {
  set_has_some();
  if (some_ == NULL) {
    some_ = new ::test::Some;
  }
  // @@protoc_insertion_point(field_mutable:test.Some.some)
  return some_;
}
::test::Some* Some::release_some() {
  // @@protoc_insertion_point(field_release:test.Some.some)
  clear_has_some();
  ::test::Some* temp = some_;
  some_ = NULL;
  return temp;
}
void Some::set_allocated_some(::test::Some* some) {
  delete some_;
  some_ = some;
  if (some) {
    set_has_some();
  } else {
    clear_has_some();
  }
  // @@protoc_insertion_point(field_set_allocated:test.Some.some)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace test

// @@protoc_insertion_point(global_scope)
