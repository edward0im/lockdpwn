// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace test {
class Root;
class RootDefaultTypeInternal;
extern RootDefaultTypeInternal _Root_default_instance_;
class Some;
class SomeDefaultTypeInternal;
extern SomeDefaultTypeInternal _Some_default_instance_;
}  // namespace test

namespace test {

namespace protobuf_test_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_test_2eproto

// ===================================================================

class Root : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:test.Root) */ {
 public:
  Root();
  virtual ~Root();

  Root(const Root& from);

  inline Root& operator=(const Root& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Root(Root&& from) noexcept
    : Root() {
    *this = ::std::move(from);
  }

  inline Root& operator=(Root&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Root& default_instance();

  static inline const Root* internal_default_instance() {
    return reinterpret_cast<const Root*>(
               &_Root_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Root* other);
  friend void swap(Root& a, Root& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Root* New() const PROTOBUF_FINAL { return New(NULL); }

  Root* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Root& from);
  void MergeFrom(const Root& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Root* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .test.Some some = 3;
  bool has_some() const;
  void clear_some();
  static const int kSomeFieldNumber = 3;
  const ::test::Some& some() const;
  ::test::Some* mutable_some();
  ::test::Some* release_some();
  void set_allocated_some(::test::Some* some);

  // optional sint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:test.Root)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_some();
  void clear_has_some();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::test::Some* some_;
  ::google::protobuf::int64 id_;
  friend struct protobuf_test_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Some : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:test.Some) */ {
 public:
  Some();
  virtual ~Some();

  Some(const Some& from);

  inline Some& operator=(const Some& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Some(Some&& from) noexcept
    : Some() {
    *this = ::std::move(from);
  }

  inline Some& operator=(Some&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Some& default_instance();

  static inline const Some* internal_default_instance() {
    return reinterpret_cast<const Some*>(
               &_Some_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Some* other);
  friend void swap(Some& a, Some& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Some* New() const PROTOBUF_FINAL { return New(NULL); }

  Some* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Some& from);
  void MergeFrom(const Some& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Some* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string someName = 2;
  bool has_somename() const;
  void clear_somename();
  static const int kSomeNameFieldNumber = 2;
  const ::std::string& somename() const;
  void set_somename(const ::std::string& value);
  #if LANG_CXX11
  void set_somename(::std::string&& value);
  #endif
  void set_somename(const char* value);
  void set_somename(const char* value, size_t size);
  ::std::string* mutable_somename();
  ::std::string* release_somename();
  void set_allocated_somename(::std::string* somename);

  // optional .test.Some some = 3;
  bool has_some() const;
  void clear_some();
  static const int kSomeFieldNumber = 3;
  const ::test::Some& some() const;
  ::test::Some* mutable_some();
  ::test::Some* release_some();
  void set_allocated_some(::test::Some* some);

  // optional sint64 someId = 1;
  bool has_someid() const;
  void clear_someid();
  static const int kSomeIdFieldNumber = 1;
  ::google::protobuf::int64 someid() const;
  void set_someid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:test.Some)
 private:
  void set_has_someid();
  void clear_has_someid();
  void set_has_somename();
  void clear_has_somename();
  void set_has_some();
  void clear_has_some();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr somename_;
  ::test::Some* some_;
  ::google::protobuf::int64 someid_;
  friend struct protobuf_test_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Root

// optional sint64 id = 1;
inline bool Root::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Root::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Root::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Root::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Root::id() const {
  // @@protoc_insertion_point(field_get:test.Root.id)
  return id_;
}
inline void Root::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:test.Root.id)
}

// optional string name = 2;
inline bool Root::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Root::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Root::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Root::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Root::name() const {
  // @@protoc_insertion_point(field_get:test.Root.name)
  return name_.GetNoArena();
}
inline void Root::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.Root.name)
}
#if LANG_CXX11
inline void Root::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.Root.name)
}
#endif
inline void Root::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.Root.name)
}
inline void Root::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.Root.name)
}
inline ::std::string* Root::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:test.Root.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Root::release_name() {
  // @@protoc_insertion_point(field_release:test.Root.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Root::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:test.Root.name)
}

// optional .test.Some some = 3;
inline bool Root::has_some() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Root::set_has_some() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Root::clear_has_some() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Root::clear_some() {
  if (some_ != NULL) some_->::test::Some::Clear();
  clear_has_some();
}
inline const ::test::Some& Root::some() const {
  const ::test::Some* p = some_;
  // @@protoc_insertion_point(field_get:test.Root.some)
  return p != NULL ? *p : *reinterpret_cast<const ::test::Some*>(
      &::test::_Some_default_instance_);
}
inline ::test::Some* Root::mutable_some() {
  set_has_some();
  if (some_ == NULL) {
    some_ = new ::test::Some;
  }
  // @@protoc_insertion_point(field_mutable:test.Root.some)
  return some_;
}
inline ::test::Some* Root::release_some() {
  // @@protoc_insertion_point(field_release:test.Root.some)
  clear_has_some();
  ::test::Some* temp = some_;
  some_ = NULL;
  return temp;
}
inline void Root::set_allocated_some(::test::Some* some) {
  delete some_;
  some_ = some;
  if (some) {
    set_has_some();
  } else {
    clear_has_some();
  }
  // @@protoc_insertion_point(field_set_allocated:test.Root.some)
}

// -------------------------------------------------------------------

// Some

// optional sint64 someId = 1;
inline bool Some::has_someid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Some::set_has_someid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Some::clear_has_someid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Some::clear_someid() {
  someid_ = GOOGLE_LONGLONG(0);
  clear_has_someid();
}
inline ::google::protobuf::int64 Some::someid() const {
  // @@protoc_insertion_point(field_get:test.Some.someId)
  return someid_;
}
inline void Some::set_someid(::google::protobuf::int64 value) {
  set_has_someid();
  someid_ = value;
  // @@protoc_insertion_point(field_set:test.Some.someId)
}

// optional string someName = 2;
inline bool Some::has_somename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Some::set_has_somename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Some::clear_has_somename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Some::clear_somename() {
  somename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_somename();
}
inline const ::std::string& Some::somename() const {
  // @@protoc_insertion_point(field_get:test.Some.someName)
  return somename_.GetNoArena();
}
inline void Some::set_somename(const ::std::string& value) {
  set_has_somename();
  somename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.Some.someName)
}
#if LANG_CXX11
inline void Some::set_somename(::std::string&& value) {
  set_has_somename();
  somename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.Some.someName)
}
#endif
inline void Some::set_somename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_somename();
  somename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.Some.someName)
}
inline void Some::set_somename(const char* value, size_t size) {
  set_has_somename();
  somename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.Some.someName)
}
inline ::std::string* Some::mutable_somename() {
  set_has_somename();
  // @@protoc_insertion_point(field_mutable:test.Some.someName)
  return somename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Some::release_somename() {
  // @@protoc_insertion_point(field_release:test.Some.someName)
  clear_has_somename();
  return somename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Some::set_allocated_somename(::std::string* somename) {
  if (somename != NULL) {
    set_has_somename();
  } else {
    clear_has_somename();
  }
  somename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), somename);
  // @@protoc_insertion_point(field_set_allocated:test.Some.someName)
}

// optional .test.Some some = 3;
inline bool Some::has_some() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Some::set_has_some() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Some::clear_has_some() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Some::clear_some() {
  if (some_ != NULL) some_->::test::Some::Clear();
  clear_has_some();
}
inline const ::test::Some& Some::some() const {
  const ::test::Some* p = some_;
  // @@protoc_insertion_point(field_get:test.Some.some)
  return p != NULL ? *p : *reinterpret_cast<const ::test::Some*>(
      &::test::_Some_default_instance_);
}
inline ::test::Some* Some::mutable_some() {
  set_has_some();
  if (some_ == NULL) {
    some_ = new ::test::Some;
  }
  // @@protoc_insertion_point(field_mutable:test.Some.some)
  return some_;
}
inline ::test::Some* Some::release_some() {
  // @@protoc_insertion_point(field_release:test.Some.some)
  clear_has_some();
  ::test::Some* temp = some_;
  some_ = NULL;
  return temp;
}
inline void Some::set_allocated_some(::test::Some* some) {
  delete some_;
  some_ = some;
  if (some) {
    set_has_some();
  } else {
    clear_has_some();
  }
  // @@protoc_insertion_point(field_set_allocated:test.Some.some)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace test

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
