classdef edward < robotics.ros.Message
    %edward MATLAB implementation of custom_msgs/edward
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'custom_msgs/edward' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '6dbde827fd3ee3ad63096b0f3a66befc' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsFloat64Class = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Float64') % Dispatch to MATLAB class for message type std_msgs/Float64
    end
    
    properties (Dependent)
        XEd
        YEd
        ZEd
    end
    
    properties (Access = protected)
        Cache = struct('XEd', [], 'YEd', [], 'ZEd', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'XEd', 'YEd', 'ZEd'} % List of non-constant message properties
        ROSPropertyList = {'x_ed', 'y_ed', 'z_ed'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = edward(msg)
            %edward Construct the message object edward
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function xed = get.XEd(obj)
            %get.XEd Get the value for property XEd
            if isempty(obj.Cache.XEd)
                obj.Cache.XEd = feval(obj.StdMsgsFloat64Class, obj.JavaMessage.getXEd);
            end
            xed = obj.Cache.XEd;
        end
        
        function set.XEd(obj, xed)
            %set.XEd Set the value for property XEd
            validateattributes(xed, {obj.StdMsgsFloat64Class}, {'nonempty', 'scalar'}, 'edward', 'XEd');
            
            obj.JavaMessage.setXEd(xed.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.XEd)
                obj.Cache.XEd.setJavaObject(xed.getJavaObject);
            end
        end
        
        function yed = get.YEd(obj)
            %get.YEd Get the value for property YEd
            if isempty(obj.Cache.YEd)
                obj.Cache.YEd = feval(obj.StdMsgsFloat64Class, obj.JavaMessage.getYEd);
            end
            yed = obj.Cache.YEd;
        end
        
        function set.YEd(obj, yed)
            %set.YEd Set the value for property YEd
            validateattributes(yed, {obj.StdMsgsFloat64Class}, {'nonempty', 'scalar'}, 'edward', 'YEd');
            
            obj.JavaMessage.setYEd(yed.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.YEd)
                obj.Cache.YEd.setJavaObject(yed.getJavaObject);
            end
        end
        
        function zed = get.ZEd(obj)
            %get.ZEd Get the value for property ZEd
            if isempty(obj.Cache.ZEd)
                obj.Cache.ZEd = feval(obj.StdMsgsFloat64Class, obj.JavaMessage.getZEd);
            end
            zed = obj.Cache.ZEd;
        end
        
        function set.ZEd(obj, zed)
            %set.ZEd Set the value for property ZEd
            validateattributes(zed, {obj.StdMsgsFloat64Class}, {'nonempty', 'scalar'}, 'edward', 'ZEd');
            
            obj.JavaMessage.setZEd(zed.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.ZEd)
                obj.Cache.ZEd.setJavaObject(zed.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.XEd = [];
            obj.Cache.YEd = [];
            obj.Cache.ZEd = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.XEd = copy(obj.XEd);
            cpObj.YEd = copy(obj.YEd);
            cpObj.ZEd = copy(obj.ZEd);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.XEd = feval([obj.StdMsgsFloat64Class '.loadobj'], strObj.XEd);
            obj.YEd = feval([obj.StdMsgsFloat64Class '.loadobj'], strObj.YEd);
            obj.ZEd = feval([obj.StdMsgsFloat64Class '.loadobj'], strObj.ZEd);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.XEd = saveobj(obj.XEd);
            strObj.YEd = saveobj(obj.YEd);
            strObj.ZEd = saveobj(obj.ZEd);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.custom_msgs.edward.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.custom_msgs.edward;
            obj.reload(strObj);
        end
    end
end
