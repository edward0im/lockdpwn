classdef msgs_type < robotics.ros.Message
    %msgs_type MATLAB implementation of arduino_sub_pub/msgs_type
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'arduino_sub_pub/msgs_type' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '821d9e92f5f34a67b645f9fcaa45158c' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Rpm1
        Rpm2
        Rpm3
        Rpm4
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Rpm1', 'Rpm2', 'Rpm3', 'Rpm4'} % List of non-constant message properties
        ROSPropertyList = {'rpm1', 'rpm2', 'rpm3', 'rpm4'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = msgs_type(msg)
            %msgs_type Construct the message object msgs_type
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function rpm1 = get.Rpm1(obj)
            %get.Rpm1 Get the value for property Rpm1
            rpm1 = single(obj.JavaMessage.getRpm1);
        end
        
        function set.Rpm1(obj, rpm1)
            %set.Rpm1 Set the value for property Rpm1
            validateattributes(rpm1, {'numeric'}, {'nonempty', 'scalar'}, 'msgs_type', 'Rpm1');
            
            obj.JavaMessage.setRpm1(rpm1);
        end
        
        function rpm2 = get.Rpm2(obj)
            %get.Rpm2 Get the value for property Rpm2
            rpm2 = single(obj.JavaMessage.getRpm2);
        end
        
        function set.Rpm2(obj, rpm2)
            %set.Rpm2 Set the value for property Rpm2
            validateattributes(rpm2, {'numeric'}, {'nonempty', 'scalar'}, 'msgs_type', 'Rpm2');
            
            obj.JavaMessage.setRpm2(rpm2);
        end
        
        function rpm3 = get.Rpm3(obj)
            %get.Rpm3 Get the value for property Rpm3
            rpm3 = single(obj.JavaMessage.getRpm3);
        end
        
        function set.Rpm3(obj, rpm3)
            %set.Rpm3 Set the value for property Rpm3
            validateattributes(rpm3, {'numeric'}, {'nonempty', 'scalar'}, 'msgs_type', 'Rpm3');
            
            obj.JavaMessage.setRpm3(rpm3);
        end
        
        function rpm4 = get.Rpm4(obj)
            %get.Rpm4 Get the value for property Rpm4
            rpm4 = single(obj.JavaMessage.getRpm4);
        end
        
        function set.Rpm4(obj, rpm4)
            %set.Rpm4 Set the value for property Rpm4
            validateattributes(rpm4, {'numeric'}, {'nonempty', 'scalar'}, 'msgs_type', 'Rpm4');
            
            obj.JavaMessage.setRpm4(rpm4);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Rpm1 = obj.Rpm1;
            cpObj.Rpm2 = obj.Rpm2;
            cpObj.Rpm3 = obj.Rpm3;
            cpObj.Rpm4 = obj.Rpm4;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Rpm1 = strObj.Rpm1;
            obj.Rpm2 = strObj.Rpm2;
            obj.Rpm3 = strObj.Rpm3;
            obj.Rpm4 = strObj.Rpm4;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Rpm1 = obj.Rpm1;
            strObj.Rpm2 = obj.Rpm2;
            strObj.Rpm3 = obj.Rpm3;
            strObj.Rpm4 = obj.Rpm4;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.arduino_sub_pub.msgs_type.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.arduino_sub_pub.msgs_type;
            obj.reload(strObj);
        end
    end
end
